{"ast":null,"code":"'use strict';\n\nvar DEFAULT_VALID_NUMBER_OF_YEARS_IN_THE_FUTURE = 19;\n\nfunction verification(isValid, isPotentiallyValid, isCurrentYear) {\n  return {\n    isValid: isValid,\n    isPotentiallyValid: isPotentiallyValid,\n    isCurrentYear: isCurrentYear || false\n  };\n}\n\nfunction expirationYear(value, maxElapsedYear) {\n  var currentFirstTwo, currentYear, firstTwo, len, twoDigitYear, valid, isCurrentYear;\n  maxElapsedYear = maxElapsedYear || DEFAULT_VALID_NUMBER_OF_YEARS_IN_THE_FUTURE;\n\n  if (typeof value !== 'string') {\n    return verification(false, false);\n  }\n\n  if (value.replace(/\\s/g, '') === '') {\n    return verification(false, true);\n  }\n\n  if (!/^\\d*$/.test(value)) {\n    return verification(false, false);\n  }\n\n  len = value.length;\n\n  if (len < 2) {\n    return verification(false, true);\n  }\n\n  currentYear = new Date().getFullYear();\n\n  if (len === 3) {\n    firstTwo = value.slice(0, 2);\n    currentFirstTwo = String(currentYear).slice(0, 2);\n    return verification(false, firstTwo === currentFirstTwo);\n  }\n\n  if (len > 4) {\n    return verification(false, false);\n  }\n\n  value = parseInt(value, 10);\n  twoDigitYear = Number(String(currentYear).substr(2, 2));\n\n  if (len === 2) {\n    isCurrentYear = twoDigitYear === value;\n    valid = value >= twoDigitYear && value <= twoDigitYear + maxElapsedYear;\n  } else if (len === 4) {\n    isCurrentYear = currentYear === value;\n    valid = value >= currentYear && value <= currentYear + maxElapsedYear;\n  }\n\n  return verification(valid, valid, isCurrentYear);\n}\n\nmodule.exports = expirationYear;","map":{"version":3,"sources":["C:/Users/neelk/Documents/GitHub/covid19-hack/node_modules/react-native-input-credit-card/node_modules/card-validator/src/expiration-year.js"],"names":["DEFAULT_VALID_NUMBER_OF_YEARS_IN_THE_FUTURE","verification","isValid","isPotentiallyValid","isCurrentYear","expirationYear","value","maxElapsedYear","currentFirstTwo","currentYear","firstTwo","len","twoDigitYear","valid","replace","test","length","Date","getFullYear","slice","String","parseInt","Number","substr","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,2CAA2C,GAAG,EAAlD;;AAEA,SAASC,YAAT,CAAsBC,OAAtB,EAA+BC,kBAA/B,EAAmDC,aAAnD,EAAkE;AAChE,SAAO;AACLF,IAAAA,OAAO,EAAEA,OADJ;AAELC,IAAAA,kBAAkB,EAAEA,kBAFf;AAGLC,IAAAA,aAAa,EAAEA,aAAa,IAAI;AAH3B,GAAP;AAKD;;AAED,SAASC,cAAT,CAAwBC,KAAxB,EAA+BC,cAA/B,EAA+C;AAC7C,MAAIC,eAAJ,EAAqBC,WAArB,EAAkCC,QAAlC,EAA4CC,GAA5C,EAAiDC,YAAjD,EAA+DC,KAA/D,EAAsET,aAAtE;AAEAG,EAAAA,cAAc,GAAGA,cAAc,IAAIP,2CAAnC;;AAEA,MAAI,OAAOM,KAAP,KAAiB,QAArB,EAA+B;AAC7B,WAAOL,YAAY,CAAC,KAAD,EAAQ,KAAR,CAAnB;AACD;;AACD,MAAIK,KAAK,CAACQ,OAAN,CAAc,KAAd,EAAqB,EAArB,MAA6B,EAAjC,EAAqC;AACnC,WAAOb,YAAY,CAAC,KAAD,EAAQ,IAAR,CAAnB;AACD;;AACD,MAAI,CAAC,QAAQc,IAAR,CAAaT,KAAb,CAAL,EAA0B;AACxB,WAAOL,YAAY,CAAC,KAAD,EAAQ,KAAR,CAAnB;AACD;;AAEDU,EAAAA,GAAG,GAAGL,KAAK,CAACU,MAAZ;;AAEA,MAAIL,GAAG,GAAG,CAAV,EAAa;AACX,WAAOV,YAAY,CAAC,KAAD,EAAQ,IAAR,CAAnB;AACD;;AAEDQ,EAAAA,WAAW,GAAG,IAAIQ,IAAJ,GAAWC,WAAX,EAAd;;AAEA,MAAIP,GAAG,KAAK,CAAZ,EAAe;AAEbD,IAAAA,QAAQ,GAAGJ,KAAK,CAACa,KAAN,CAAY,CAAZ,EAAe,CAAf,CAAX;AACAX,IAAAA,eAAe,GAAGY,MAAM,CAACX,WAAD,CAAN,CAAoBU,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAlB;AAEA,WAAOlB,YAAY,CAAC,KAAD,EAAQS,QAAQ,KAAKF,eAArB,CAAnB;AACD;;AAED,MAAIG,GAAG,GAAG,CAAV,EAAa;AACX,WAAOV,YAAY,CAAC,KAAD,EAAQ,KAAR,CAAnB;AACD;;AAEDK,EAAAA,KAAK,GAAGe,QAAQ,CAACf,KAAD,EAAQ,EAAR,CAAhB;AACAM,EAAAA,YAAY,GAAGU,MAAM,CAACF,MAAM,CAACX,WAAD,CAAN,CAAoBc,MAApB,CAA2B,CAA3B,EAA8B,CAA9B,CAAD,CAArB;;AAEA,MAAIZ,GAAG,KAAK,CAAZ,EAAe;AACbP,IAAAA,aAAa,GAAGQ,YAAY,KAAKN,KAAjC;AACAO,IAAAA,KAAK,GAAGP,KAAK,IAAIM,YAAT,IAAyBN,KAAK,IAAIM,YAAY,GAAGL,cAAzD;AACD,GAHD,MAGO,IAAII,GAAG,KAAK,CAAZ,EAAe;AACpBP,IAAAA,aAAa,GAAGK,WAAW,KAAKH,KAAhC;AACAO,IAAAA,KAAK,GAAGP,KAAK,IAAIG,WAAT,IAAwBH,KAAK,IAAIG,WAAW,GAAGF,cAAvD;AACD;;AAED,SAAON,YAAY,CAACY,KAAD,EAAQA,KAAR,EAAeT,aAAf,CAAnB;AACD;;AAEDoB,MAAM,CAACC,OAAP,GAAiBpB,cAAjB","sourcesContent":["'use strict';\n\nvar DEFAULT_VALID_NUMBER_OF_YEARS_IN_THE_FUTURE = 19;\n\nfunction verification(isValid, isPotentiallyValid, isCurrentYear) {\n  return {\n    isValid: isValid,\n    isPotentiallyValid: isPotentiallyValid,\n    isCurrentYear: isCurrentYear || false\n  };\n}\n\nfunction expirationYear(value, maxElapsedYear) {\n  var currentFirstTwo, currentYear, firstTwo, len, twoDigitYear, valid, isCurrentYear;\n\n  maxElapsedYear = maxElapsedYear || DEFAULT_VALID_NUMBER_OF_YEARS_IN_THE_FUTURE;\n\n  if (typeof value !== 'string') {\n    return verification(false, false);\n  }\n  if (value.replace(/\\s/g, '') === '') {\n    return verification(false, true);\n  }\n  if (!/^\\d*$/.test(value)) {\n    return verification(false, false);\n  }\n\n  len = value.length;\n\n  if (len < 2) {\n    return verification(false, true);\n  }\n\n  currentYear = new Date().getFullYear();\n\n  if (len === 3) {\n    // 20x === 20x\n    firstTwo = value.slice(0, 2);\n    currentFirstTwo = String(currentYear).slice(0, 2);\n\n    return verification(false, firstTwo === currentFirstTwo);\n  }\n\n  if (len > 4) {\n    return verification(false, false);\n  }\n\n  value = parseInt(value, 10);\n  twoDigitYear = Number(String(currentYear).substr(2, 2));\n\n  if (len === 2) {\n    isCurrentYear = twoDigitYear === value;\n    valid = value >= twoDigitYear && value <= twoDigitYear + maxElapsedYear;\n  } else if (len === 4) {\n    isCurrentYear = currentYear === value;\n    valid = value >= currentYear && value <= currentYear + maxElapsedYear;\n  }\n\n  return verification(valid, valid, isCurrentYear);\n}\n\nmodule.exports = expirationYear;\n"]},"metadata":{},"sourceType":"script"}