{"ast":null,"code":"'use strict';\n\nfunction matchesRange(cardNumber, min, max) {\n  var maxLengthToCheck = String(min).length;\n  var substr = cardNumber.substr(0, maxLengthToCheck);\n  var integerRepresentationOfCardNumber = parseInt(substr, 10);\n  min = parseInt(String(min).substr(0, substr.length), 10);\n  max = parseInt(String(max).substr(0, substr.length), 10);\n  return integerRepresentationOfCardNumber >= min && integerRepresentationOfCardNumber <= max;\n}\n\nfunction matchesPattern(cardNumber, pattern) {\n  pattern = String(pattern);\n  return pattern.substring(0, cardNumber.length) === cardNumber.substring(0, pattern.length);\n}\n\nfunction matches(cardNumber, pattern) {\n  if (Array.isArray(pattern)) {\n    return matchesRange(cardNumber, pattern[0], pattern[1]);\n  }\n\n  return matchesPattern(cardNumber, pattern);\n}\n\nmodule.exports = matches;","map":{"version":3,"sources":["C:/Users/neelk/Documents/GitHub/covid19-hack/node_modules/react-native-input-credit-card/node_modules/credit-card-type/lib/matches.js"],"names":["matchesRange","cardNumber","min","max","maxLengthToCheck","String","length","substr","integerRepresentationOfCardNumber","parseInt","matchesPattern","pattern","substring","matches","Array","isArray","module","exports"],"mappings":"AAAA;;AAGA,SAASA,YAAT,CAAsBC,UAAtB,EAAkCC,GAAlC,EAAuCC,GAAvC,EAA4C;AAC1C,MAAIC,gBAAgB,GAAGC,MAAM,CAACH,GAAD,CAAN,CAAYI,MAAnC;AACA,MAAIC,MAAM,GAAGN,UAAU,CAACM,MAAX,CAAkB,CAAlB,EAAqBH,gBAArB,CAAb;AACA,MAAII,iCAAiC,GAAGC,QAAQ,CAACF,MAAD,EAAS,EAAT,CAAhD;AAEAL,EAAAA,GAAG,GAAGO,QAAQ,CAACJ,MAAM,CAACH,GAAD,CAAN,CAAYK,MAAZ,CAAmB,CAAnB,EAAsBA,MAAM,CAACD,MAA7B,CAAD,EAAuC,EAAvC,CAAd;AACAH,EAAAA,GAAG,GAAGM,QAAQ,CAACJ,MAAM,CAACF,GAAD,CAAN,CAAYI,MAAZ,CAAmB,CAAnB,EAAsBA,MAAM,CAACD,MAA7B,CAAD,EAAuC,EAAvC,CAAd;AAEA,SAAOE,iCAAiC,IAAIN,GAArC,IAA4CM,iCAAiC,IAAIL,GAAxF;AACD;;AAED,SAASO,cAAT,CAAwBT,UAAxB,EAAoCU,OAApC,EAA6C;AAC3CA,EAAAA,OAAO,GAAGN,MAAM,CAACM,OAAD,CAAhB;AAEA,SAAOA,OAAO,CAACC,SAAR,CAAkB,CAAlB,EAAqBX,UAAU,CAACK,MAAhC,MAA4CL,UAAU,CAACW,SAAX,CAAqB,CAArB,EAAwBD,OAAO,CAACL,MAAhC,CAAnD;AACD;;AAED,SAASO,OAAT,CAAiBZ,UAAjB,EAA6BU,OAA7B,EAAsC;AACpC,MAAIG,KAAK,CAACC,OAAN,CAAcJ,OAAd,CAAJ,EAA4B;AAC1B,WAAOX,YAAY,CAACC,UAAD,EAAaU,OAAO,CAAC,CAAD,CAApB,EAAyBA,OAAO,CAAC,CAAD,CAAhC,CAAnB;AACD;;AAED,SAAOD,cAAc,CAACT,UAAD,EAAaU,OAAb,CAArB;AACD;;AAEDK,MAAM,CAACC,OAAP,GAAiBJ,OAAjB","sourcesContent":["'use strict';\n\n// Adapted from https://github.com/polvo-labs/card-type/blob/aaab11f80fa1939bccc8f24905a06ae3cd864356/src/cardType.js#L37-L42\nfunction matchesRange(cardNumber, min, max) {\n  var maxLengthToCheck = String(min).length;\n  var substr = cardNumber.substr(0, maxLengthToCheck);\n  var integerRepresentationOfCardNumber = parseInt(substr, 10);\n\n  min = parseInt(String(min).substr(0, substr.length), 10);\n  max = parseInt(String(max).substr(0, substr.length), 10);\n\n  return integerRepresentationOfCardNumber >= min && integerRepresentationOfCardNumber <= max;\n}\n\nfunction matchesPattern(cardNumber, pattern) {\n  pattern = String(pattern);\n\n  return pattern.substring(0, cardNumber.length) === cardNumber.substring(0, pattern.length);\n}\n\nfunction matches(cardNumber, pattern) {\n  if (Array.isArray(pattern)) {\n    return matchesRange(cardNumber, pattern[0], pattern[1]);\n  }\n\n  return matchesPattern(cardNumber, pattern);\n}\n\nmodule.exports = matches;\n"]},"metadata":{},"sourceType":"script"}