{"ast":null,"code":"'use strict';\n\nvar expirationYear = require(\"./expiration-year\");\n\nvar isArray = require(\"./lib/is-array\");\n\nfunction getNumberOfMonthDigitsInDateString(dateString) {\n  var firstCharacter = Number(dateString[0]);\n  var assumedYear;\n\n  if (firstCharacter === 0) {\n    return 2;\n  }\n\n  if (firstCharacter > 1) {\n    return 1;\n  }\n\n  if (firstCharacter === 1 && Number(dateString[1]) > 2) {\n    return 1;\n  }\n\n  if (firstCharacter === 1) {\n    assumedYear = dateString.substr(1);\n    return expirationYear(assumedYear).isPotentiallyValid ? 1 : 2;\n  }\n\n  if (dateString.length === 5) {\n    return 1;\n  }\n\n  if (dateString.length > 5) {\n    return 2;\n  }\n\n  return 1;\n}\n\nfunction parseDate(date) {\n  var month, numberOfDigitsInMonth;\n\n  if (/^\\d{4}-\\d{1,2}$/.test(date)) {\n    date = date.split('-').reverse();\n  } else if (/\\//.test(date)) {\n    date = date.split(/\\s*\\/\\s*/g);\n  } else if (/\\s/.test(date)) {\n    date = date.split(/ +/g);\n  }\n\n  if (isArray(date)) {\n    return {\n      month: date[0] || '',\n      year: date.slice(1).join()\n    };\n  }\n\n  numberOfDigitsInMonth = getNumberOfMonthDigitsInDateString(date);\n  month = date.substr(0, numberOfDigitsInMonth);\n  return {\n    month: month,\n    year: date.substr(month.length)\n  };\n}\n\nmodule.exports = parseDate;","map":{"version":3,"sources":["C:/Users/neelk/Documents/GitHub/covid19-hack/node_modules/react-native-input-credit-card/node_modules/card-validator/src/parse-date.js"],"names":["expirationYear","require","isArray","getNumberOfMonthDigitsInDateString","dateString","firstCharacter","Number","assumedYear","substr","isPotentiallyValid","length","parseDate","date","month","numberOfDigitsInMonth","test","split","reverse","year","slice","join","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,cAAc,GAAGC,OAAO,qBAA5B;;AACA,IAAIC,OAAO,GAAGD,OAAO,kBAArB;;AAEA,SAASE,kCAAT,CAA4CC,UAA5C,EAAwD;AACtD,MAAIC,cAAc,GAAGC,MAAM,CAACF,UAAU,CAAC,CAAD,CAAX,CAA3B;AACA,MAAIG,WAAJ;;AAQA,MAAIF,cAAc,KAAK,CAAvB,EAA0B;AACxB,WAAO,CAAP;AACD;;AAQD,MAAIA,cAAc,GAAG,CAArB,EAAwB;AACtB,WAAO,CAAP;AACD;;AAQD,MAAIA,cAAc,KAAK,CAAnB,IAAwBC,MAAM,CAACF,UAAU,CAAC,CAAD,CAAX,CAAN,GAAwB,CAApD,EAAuD;AACrD,WAAO,CAAP;AACD;;AAaD,MAAIC,cAAc,KAAK,CAAvB,EAA0B;AACxBE,IAAAA,WAAW,GAAGH,UAAU,CAACI,MAAX,CAAkB,CAAlB,CAAd;AAEA,WAAOR,cAAc,CAACO,WAAD,CAAd,CAA4BE,kBAA5B,GAAiD,CAAjD,GAAqD,CAA5D;AACD;;AASD,MAAIL,UAAU,CAACM,MAAX,KAAsB,CAA1B,EAA6B;AAC3B,WAAO,CAAP;AACD;;AASD,MAAIN,UAAU,CAACM,MAAX,GAAoB,CAAxB,EAA2B;AACzB,WAAO,CAAP;AACD;;AAKD,SAAO,CAAP;AACD;;AAED,SAASC,SAAT,CAAmBC,IAAnB,EAAyB;AACvB,MAAIC,KAAJ,EAAWC,qBAAX;;AAEA,MAAI,kBAAkBC,IAAlB,CAAuBH,IAAvB,CAAJ,EAAkC;AAChCA,IAAAA,IAAI,GAAGA,IAAI,CAACI,KAAL,CAAW,GAAX,EAAgBC,OAAhB,EAAP;AACD,GAFD,MAEO,IAAI,KAAKF,IAAL,CAAUH,IAAV,CAAJ,EAAqB;AAC1BA,IAAAA,IAAI,GAAGA,IAAI,CAACI,KAAL,CAAW,WAAX,CAAP;AACD,GAFM,MAEA,IAAI,KAAKD,IAAL,CAAUH,IAAV,CAAJ,EAAqB;AAC1BA,IAAAA,IAAI,GAAGA,IAAI,CAACI,KAAL,CAAW,KAAX,CAAP;AACD;;AAED,MAAId,OAAO,CAACU,IAAD,CAAX,EAAmB;AACjB,WAAO;AACLC,MAAAA,KAAK,EAAED,IAAI,CAAC,CAAD,CAAJ,IAAW,EADb;AAELM,MAAAA,IAAI,EAAEN,IAAI,CAACO,KAAL,CAAW,CAAX,EAAcC,IAAd;AAFD,KAAP;AAID;;AAEDN,EAAAA,qBAAqB,GAAGX,kCAAkC,CAACS,IAAD,CAA1D;AAEAC,EAAAA,KAAK,GAAGD,IAAI,CAACJ,MAAL,CAAY,CAAZ,EAAeM,qBAAf,CAAR;AAEA,SAAO;AACLD,IAAAA,KAAK,EAAEA,KADF;AAELK,IAAAA,IAAI,EAAEN,IAAI,CAACJ,MAAL,CAAYK,KAAK,CAACH,MAAlB;AAFD,GAAP;AAID;;AAEDW,MAAM,CAACC,OAAP,GAAiBX,SAAjB","sourcesContent":["'use strict';\n\nvar expirationYear = require('./expiration-year');\nvar isArray = require('./lib/is-array');\n\nfunction getNumberOfMonthDigitsInDateString(dateString) {\n  var firstCharacter = Number(dateString[0]);\n  var assumedYear;\n\n  /*\n    if the first character in the string starts with `0`,\n    we know that the month will be 2 digits.\n\n    '0122' => {month: '01', year: '22'}\n  */\n  if (firstCharacter === 0) {\n    return 2;\n  }\n\n  /*\n    if the first character in the string starts with\n    number greater than 1, it must be a 1 digit month\n\n    '322' => {month: '3', year: '22'}\n  */\n  if (firstCharacter > 1) {\n    return 1;\n  }\n\n  /*\n    if the first 2 characters make up a number between\n    13-19, we know that the month portion must be 1\n\n    '139' => {month: '1', year: '39'}\n  */\n  if (firstCharacter === 1 && Number(dateString[1]) > 2) {\n    return 1;\n  }\n\n  /*\n    if the first 2 characters make up a number between\n    10-12, we check if the year portion would be considered\n    valid if we assumed that the month was 1. If it is\n    not potentially valid, we assume the month must have\n    2 digits.\n\n    '109' => {month: '10', year: '9'}\n    '120' => {month: '1', year: '20'} // when checked in the year 2019\n    '120' => {month: '12', year: '0'} // when checked in the year 2021\n  */\n  if (firstCharacter === 1) {\n    assumedYear = dateString.substr(1);\n\n    return expirationYear(assumedYear).isPotentiallyValid ? 1 : 2;\n  }\n\n  /*\n    If the length of the value is exactly 5 characters,\n    we assume a full year was passed in, meaning the remaining\n    single leading digit must be the month value.\n\n    '12202' => {month: '1', year: '2202'}\n  */\n  if (dateString.length === 5) {\n    return 1;\n  }\n\n  /*\n    If the length of the value is more than five characters,\n    we assume a full year was passed in addition to the month\n    and therefore the month portion must be 2 digits.\n\n    '112020' => {month: '11', year: '2020'}\n  */\n  if (dateString.length > 5) {\n    return 2;\n  }\n\n  /*\n    By default, the month value is the first value\n  */\n  return 1;\n}\n\nfunction parseDate(date) {\n  var month, numberOfDigitsInMonth;\n\n  if (/^\\d{4}-\\d{1,2}$/.test(date)) {\n    date = date.split('-').reverse();\n  } else if (/\\//.test(date)) {\n    date = date.split(/\\s*\\/\\s*/g);\n  } else if (/\\s/.test(date)) {\n    date = date.split(/ +/g);\n  }\n\n  if (isArray(date)) {\n    return {\n      month: date[0] || '',\n      year: date.slice(1).join()\n    };\n  }\n\n  numberOfDigitsInMonth = getNumberOfMonthDigitsInDateString(date);\n\n  month = date.substr(0, numberOfDigitsInMonth);\n\n  return {\n    month: month,\n    year: date.substr(month.length)\n  };\n}\n\nmodule.exports = parseDate;\n"]},"metadata":{},"sourceType":"script"}