{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport Animated, { Easing } from \"react-native-reanimated\";\nimport { State } from \"react-native-gesture-handler\";\nimport { useMemoOne } from \"use-memo-one\";\nimport { bin } from \"./Math\";\nvar Value = Animated.Value,\n    cond = Animated.cond,\n    eq = Animated.eq,\n    block = Animated.block,\n    set = Animated.set,\n    Clock = Animated.Clock,\n    spring = Animated.spring,\n    startClock = Animated.startClock,\n    timing = Animated.timing,\n    neq = Animated.neq,\n    useCode = Animated.useCode;\nexport var withTransition = function withTransition(value) {\n  var timingConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var gestureState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Value(State.UNDETERMINED);\n  var clock = new Clock();\n  var state = {\n    finished: new Value(0),\n    frameTime: new Value(0),\n    position: new Value(0),\n    time: new Value(0)\n  };\n\n  var config = _objectSpread({\n    toValue: new Value(0),\n    duration: 250,\n    easing: Easing.linear\n  }, timingConfig);\n\n  return block([startClock(clock), cond(neq(config.toValue, value), [set(state.frameTime, 0), set(state.time, 0), set(state.finished, 0), set(config.toValue, value)]), cond(eq(gestureState, State.ACTIVE), [set(state.position, value)], timing(clock, state, config)), state.position]);\n};\nexport var withSpringTransition = function withSpringTransition(value) {\n  var springConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var velocity = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var gestureState = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new Value(State.UNDETERMINED);\n  var clock = new Clock();\n  var state = {\n    finished: new Value(0),\n    velocity: new Value(0),\n    position: new Value(0),\n    time: new Value(0)\n  };\n\n  var config = _objectSpread({\n    toValue: new Value(0),\n    damping: 15,\n    mass: 1,\n    stiffness: 150,\n    overshootClamping: false,\n    restSpeedThreshold: 1,\n    restDisplacementThreshold: 1\n  }, springConfig);\n\n  return block([startClock(clock), set(config.toValue, value), cond(eq(gestureState, State.ACTIVE), [set(state.velocity, velocity), set(state.position, value)], spring(clock, state, config)), state.position]);\n};\nexport var withTimingTransition = withTransition;\nexport var useTransition = function useTransition(state) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var value = useMemoOne(function () {\n    return new Value(0);\n  }, []);\n  useCode(function () {\n    return set(value, typeof state === \"boolean\" ? bin(state) : state);\n  }, [state, value]);\n  var transition = useMemoOne(function () {\n    return withTransition(value, config);\n  }, [value]);\n  return transition;\n};\nexport var useSpringTransition = function useSpringTransition(state) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var value = useMemoOne(function () {\n    return new Value(0);\n  }, []);\n  useCode(function () {\n    return set(value, typeof state === \"boolean\" ? bin(state) : state);\n  }, [state, value]);\n  var transition = useMemoOne(function () {\n    return withSpringTransition(value, config);\n  }, [value]);\n  return transition;\n};\nexport var useTimingTransition = useTransition;","map":{"version":3,"sources":["Transitions.ts"],"names":["Value","cond","eq","block","set","Clock","spring","startClock","timing","neq","useCode","Animated","withTransition","timingConfig","gestureState","State","clock","state","finished","frameTime","position","time","config","toValue","duration","easing","Easing","withSpringTransition","springConfig","velocity","damping","mass","stiffness","overshootClamping","restSpeedThreshold","restDisplacementThreshold","withTimingTransition","useTransition","value","useMemoOne","bin","transition","useSpringTransition","useTimingTransition"],"mappings":"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","sourcesContent":["import Animated, { Easing } from \"react-native-reanimated\";\nimport { State } from \"react-native-gesture-handler\";\nimport { useMemoOne } from \"use-memo-one\";\n\nimport { bin } from \"./Math\";\nimport { SpringConfig, TimingConfig } from \"./Animations\";\n\nconst {\n  Value,\n  cond,\n  eq,\n  block,\n  set,\n  Clock,\n  spring,\n  startClock,\n  timing,\n  neq,\n  useCode\n} = Animated;\n\nexport const withTransition = (\n  value: Animated.Node<number>,\n  timingConfig: TimingConfig = {},\n  gestureState: Animated.Value<State> = new Value(State.UNDETERMINED)\n) => {\n  const clock = new Clock();\n  const state = {\n    finished: new Value(0),\n    frameTime: new Value(0),\n    position: new Value(0),\n    time: new Value(0)\n  };\n  const config = {\n    toValue: new Value(0),\n    duration: 250,\n    easing: Easing.linear,\n    ...timingConfig\n  };\n  return block([\n    startClock(clock),\n    cond(neq(config.toValue, value), [\n      set(state.frameTime, 0),\n      set(state.time, 0),\n      set(state.finished, 0),\n      set(config.toValue, value)\n    ]),\n    cond(\n      eq(gestureState, State.ACTIVE),\n      [set(state.position, value)],\n      timing(clock, state, config)\n    ),\n    state.position\n  ]);\n};\n\nexport const withSpringTransition = (\n  value: Animated.Node<number>,\n  springConfig: SpringConfig = {},\n  velocity: Animated.Adaptable<number> = 0,\n  gestureState: Animated.Value<State> = new Value(State.UNDETERMINED)\n) => {\n  const clock = new Clock();\n  const state = {\n    finished: new Value(0),\n    velocity: new Value(0),\n    position: new Value(0),\n    time: new Value(0)\n  };\n  const config = {\n    toValue: new Value(0),\n    damping: 15,\n    mass: 1,\n    stiffness: 150,\n    overshootClamping: false,\n    restSpeedThreshold: 1,\n    restDisplacementThreshold: 1,\n    ...springConfig\n  };\n  return block([\n    startClock(clock),\n    set(config.toValue, value),\n    cond(\n      eq(gestureState, State.ACTIVE),\n      [set(state.velocity, velocity), set(state.position, value)],\n      spring(clock, state, config)\n    ),\n    state.position\n  ]);\n};\n\nexport const withTimingTransition = withTransition;\n\nexport const useTransition = (\n  state: boolean | number,\n  config: TimingConfig = {}\n) => {\n  const value = useMemoOne(() => new Value(0), []);\n  useCode(() => set(value, typeof state === \"boolean\" ? bin(state) : state), [\n    state,\n    value\n  ]);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const transition = useMemoOne(() => withTransition(value, config), [value]);\n  return transition;\n};\n\nexport const useSpringTransition = (\n  state: boolean | number,\n  config: SpringConfig = {}\n) => {\n  const value = useMemoOne(() => new Value(0), []);\n  useCode(() => set(value, typeof state === \"boolean\" ? bin(state) : state), [\n    state,\n    value\n  ]);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const transition = useMemoOne(() => withSpringTransition(value, config), [\n    value\n  ]);\n  return transition;\n};\n\nexport const useTimingTransition = useTransition;\n"]},"metadata":{},"sourceType":"module"}