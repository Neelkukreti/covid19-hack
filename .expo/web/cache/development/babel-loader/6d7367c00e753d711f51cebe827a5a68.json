{"ast":null,"code":"'use strict';\n\nvar luhn10 = require(\"./luhn-10\");\n\nvar getCardTypes = require('credit-card-type');\n\nfunction verification(card, isPotentiallyValid, isValid) {\n  return {\n    card: card,\n    isPotentiallyValid: isPotentiallyValid,\n    isValid: isValid\n  };\n}\n\nfunction cardNumber(value, options) {\n  var potentialTypes, cardType, isPotentiallyValid, isValid, i, maxLength;\n  options = options || {};\n\n  if (typeof value === 'number') {\n    value = String(value);\n  }\n\n  if (typeof value !== 'string') {\n    return verification(null, false, false);\n  }\n\n  value = value.replace(/\\-|\\s/g, '');\n\n  if (!/^\\d*$/.test(value)) {\n    return verification(null, false, false);\n  }\n\n  potentialTypes = getCardTypes(value);\n\n  if (potentialTypes.length === 0) {\n    return verification(null, false, false);\n  } else if (potentialTypes.length !== 1) {\n    return verification(null, true, false);\n  }\n\n  cardType = potentialTypes[0];\n\n  if (options.maxLength && value.length > options.maxLength) {\n    return verification(cardType, false, false);\n  }\n\n  if (cardType.type === getCardTypes.types.UNIONPAY && options.luhnValidateUnionPay !== true) {\n    isValid = true;\n  } else {\n    isValid = luhn10(value);\n  }\n\n  maxLength = Math.max.apply(null, cardType.lengths);\n\n  if (options.maxLength) {\n    maxLength = Math.min(options.maxLength, maxLength);\n  }\n\n  for (i = 0; i < cardType.lengths.length; i++) {\n    if (cardType.lengths[i] === value.length) {\n      isPotentiallyValid = value.length < maxLength || isValid;\n      return verification(cardType, isPotentiallyValid, isValid);\n    }\n  }\n\n  return verification(cardType, value.length < maxLength, false);\n}\n\nmodule.exports = cardNumber;","map":{"version":3,"sources":["C:/Users/neelk/Downloads/covid19-hack-master/covid19-hack-master/node_modules/react-native-input-credit-card/node_modules/card-validator/src/card-number.js"],"names":["luhn10","require","getCardTypes","verification","card","isPotentiallyValid","isValid","cardNumber","value","options","potentialTypes","cardType","i","maxLength","String","replace","test","length","type","types","UNIONPAY","luhnValidateUnionPay","Math","max","apply","lengths","min","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar luhn10 = require('./luhn-10');\nvar getCardTypes = require('credit-card-type');\n\nfunction verification(card, isPotentiallyValid, isValid) {\n  return {card: card, isPotentiallyValid: isPotentiallyValid, isValid: isValid};\n}\n\nfunction cardNumber(value, options) {\n  var potentialTypes, cardType, isPotentiallyValid, isValid, i, maxLength;\n\n  options = options || {};\n\n  if (typeof value === 'number') {\n    value = String(value);\n  }\n\n  if (typeof value !== 'string') { return verification(null, false, false); }\n\n  value = value.replace(/\\-|\\s/g, '');\n\n  if (!/^\\d*$/.test(value)) { return verification(null, false, false); }\n\n  potentialTypes = getCardTypes(value);\n\n  if (potentialTypes.length === 0) {\n    return verification(null, false, false);\n  } else if (potentialTypes.length !== 1) {\n    return verification(null, true, false);\n  }\n\n  cardType = potentialTypes[0];\n\n  if (options.maxLength && value.length > options.maxLength) {\n    return verification(cardType, false, false);\n  }\n\n  if (cardType.type === getCardTypes.types.UNIONPAY && options.luhnValidateUnionPay !== true) {\n    isValid = true;\n  } else {\n    isValid = luhn10(value);\n  }\n\n  maxLength = Math.max.apply(null, cardType.lengths);\n  if (options.maxLength) {\n    maxLength = Math.min(options.maxLength, maxLength);\n  }\n\n  for (i = 0; i < cardType.lengths.length; i++) {\n    if (cardType.lengths[i] === value.length) {\n      isPotentiallyValid = value.length < maxLength || isValid;\n\n      return verification(cardType, isPotentiallyValid, isValid);\n    }\n  }\n\n  return verification(cardType, value.length < maxLength, false);\n}\n\nmodule.exports = cardNumber;\n"]},"metadata":{},"sourceType":"script"}