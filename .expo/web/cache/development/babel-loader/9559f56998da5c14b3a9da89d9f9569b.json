{"ast":null,"code":"'use strict';\n\nvar parseDate = require(\"./parse-date\");\n\nvar expirationMonth = require(\"./expiration-month\");\n\nvar expirationYear = require(\"./expiration-year\");\n\nfunction verification(isValid, isPotentiallyValid, month, year) {\n  return {\n    isValid: isValid,\n    isPotentiallyValid: isPotentiallyValid,\n    month: month,\n    year: year\n  };\n}\n\nfunction expirationDate(value, maxElapsedYear) {\n  var date, monthValid, yearValid, isValidForThisYear;\n\n  if (typeof value === 'string') {\n    value = value.replace(/^(\\d\\d) (\\d\\d(\\d\\d)?)$/, '$1/$2');\n    date = parseDate(value);\n  } else if (value !== null && typeof value === 'object') {\n    date = {\n      month: String(value.month),\n      year: String(value.year)\n    };\n  } else {\n    return verification(false, false, null, null);\n  }\n\n  monthValid = expirationMonth(date.month);\n  yearValid = expirationYear(date.year, maxElapsedYear);\n\n  if (monthValid.isValid) {\n    if (yearValid.isCurrentYear) {\n      isValidForThisYear = monthValid.isValidForThisYear;\n      return verification(isValidForThisYear, isValidForThisYear, date.month, date.year);\n    }\n\n    if (yearValid.isValid) {\n      return verification(true, true, date.month, date.year);\n    }\n  }\n\n  if (monthValid.isPotentiallyValid && yearValid.isPotentiallyValid) {\n    return verification(false, true, null, null);\n  }\n\n  return verification(false, false, null, null);\n}\n\nmodule.exports = expirationDate;","map":{"version":3,"sources":["C:/Users/neelk/Documents/GitHub/covid19-hack/node_modules/react-native-input-credit-card/node_modules/card-validator/src/expiration-date.js"],"names":["parseDate","require","expirationMonth","expirationYear","verification","isValid","isPotentiallyValid","month","year","expirationDate","value","maxElapsedYear","date","monthValid","yearValid","isValidForThisYear","replace","String","isCurrentYear","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,gBAAvB;;AACA,IAAIC,eAAe,GAAGD,OAAO,sBAA7B;;AACA,IAAIE,cAAc,GAAGF,OAAO,qBAA5B;;AAEA,SAASG,YAAT,CAAsBC,OAAtB,EAA+BC,kBAA/B,EAAmDC,KAAnD,EAA0DC,IAA1D,EAAgE;AAC9D,SAAO;AACLH,IAAAA,OAAO,EAAEA,OADJ;AAELC,IAAAA,kBAAkB,EAAEA,kBAFf;AAGLC,IAAAA,KAAK,EAAEA,KAHF;AAILC,IAAAA,IAAI,EAAEA;AAJD,GAAP;AAMD;;AAED,SAASC,cAAT,CAAwBC,KAAxB,EAA+BC,cAA/B,EAA+C;AAC7C,MAAIC,IAAJ,EAAUC,UAAV,EAAsBC,SAAtB,EAAiCC,kBAAjC;;AAEA,MAAI,OAAOL,KAAP,KAAiB,QAArB,EAA+B;AAC7BA,IAAAA,KAAK,GAAGA,KAAK,CAACM,OAAN,CAAc,wBAAd,EAAwC,OAAxC,CAAR;AACAJ,IAAAA,IAAI,GAAGZ,SAAS,CAACU,KAAD,CAAhB;AACD,GAHD,MAGO,IAAIA,KAAK,KAAK,IAAV,IAAkB,OAAOA,KAAP,KAAiB,QAAvC,EAAiD;AACtDE,IAAAA,IAAI,GAAG;AACLL,MAAAA,KAAK,EAAEU,MAAM,CAACP,KAAK,CAACH,KAAP,CADR;AAELC,MAAAA,IAAI,EAAES,MAAM,CAACP,KAAK,CAACF,IAAP;AAFP,KAAP;AAID,GALM,MAKA;AACL,WAAOJ,YAAY,CAAC,KAAD,EAAQ,KAAR,EAAe,IAAf,EAAqB,IAArB,CAAnB;AACD;;AAEDS,EAAAA,UAAU,GAAGX,eAAe,CAACU,IAAI,CAACL,KAAN,CAA5B;AACAO,EAAAA,SAAS,GAAGX,cAAc,CAACS,IAAI,CAACJ,IAAN,EAAYG,cAAZ,CAA1B;;AAEA,MAAIE,UAAU,CAACR,OAAf,EAAwB;AACtB,QAAIS,SAAS,CAACI,aAAd,EAA6B;AAC3BH,MAAAA,kBAAkB,GAAGF,UAAU,CAACE,kBAAhC;AAEA,aAAOX,YAAY,CAACW,kBAAD,EAAqBA,kBAArB,EAAyCH,IAAI,CAACL,KAA9C,EAAqDK,IAAI,CAACJ,IAA1D,CAAnB;AACD;;AAED,QAAIM,SAAS,CAACT,OAAd,EAAuB;AACrB,aAAOD,YAAY,CAAC,IAAD,EAAO,IAAP,EAAaQ,IAAI,CAACL,KAAlB,EAAyBK,IAAI,CAACJ,IAA9B,CAAnB;AACD;AACF;;AAED,MAAIK,UAAU,CAACP,kBAAX,IAAiCQ,SAAS,CAACR,kBAA/C,EAAmE;AACjE,WAAOF,YAAY,CAAC,KAAD,EAAQ,IAAR,EAAc,IAAd,EAAoB,IAApB,CAAnB;AACD;;AAED,SAAOA,YAAY,CAAC,KAAD,EAAQ,KAAR,EAAe,IAAf,EAAqB,IAArB,CAAnB;AACD;;AAEDe,MAAM,CAACC,OAAP,GAAiBX,cAAjB","sourcesContent":["'use strict';\n\nvar parseDate = require('./parse-date');\nvar expirationMonth = require('./expiration-month');\nvar expirationYear = require('./expiration-year');\n\nfunction verification(isValid, isPotentiallyValid, month, year) {\n  return {\n    isValid: isValid,\n    isPotentiallyValid: isPotentiallyValid,\n    month: month,\n    year: year\n  };\n}\n\nfunction expirationDate(value, maxElapsedYear) {\n  var date, monthValid, yearValid, isValidForThisYear;\n\n  if (typeof value === 'string') {\n    value = value.replace(/^(\\d\\d) (\\d\\d(\\d\\d)?)$/, '$1/$2');\n    date = parseDate(value);\n  } else if (value !== null && typeof value === 'object') {\n    date = {\n      month: String(value.month),\n      year: String(value.year)\n    };\n  } else {\n    return verification(false, false, null, null);\n  }\n\n  monthValid = expirationMonth(date.month);\n  yearValid = expirationYear(date.year, maxElapsedYear);\n\n  if (monthValid.isValid) {\n    if (yearValid.isCurrentYear) {\n      isValidForThisYear = monthValid.isValidForThisYear;\n\n      return verification(isValidForThisYear, isValidForThisYear, date.month, date.year);\n    }\n\n    if (yearValid.isValid) {\n      return verification(true, true, date.month, date.year);\n    }\n  }\n\n  if (monthValid.isPotentiallyValid && yearValid.isPotentiallyValid) {\n    return verification(false, true, null, null);\n  }\n\n  return verification(false, false, null, null);\n}\n\nmodule.exports = expirationDate;\n"]},"metadata":{},"sourceType":"script"}