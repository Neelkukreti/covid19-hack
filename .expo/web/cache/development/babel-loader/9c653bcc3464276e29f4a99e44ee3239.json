{"ast":null,"code":"'use strict';\n\nvar types = require(\"./lib/card-types\");\n\nvar clone = require(\"./lib/clone\");\n\nvar findBestMatch = require(\"./lib/find-best-match\");\n\nvar isValidInputType = require(\"./lib/is-valid-input-type\");\n\nvar addMatchingCardsToResults = require(\"./lib/add-matching-cards-to-results\");\n\nvar testOrder;\nvar customCards = {};\nvar cardNames = {\n  VISA: 'visa',\n  MASTERCARD: 'mastercard',\n  AMERICAN_EXPRESS: 'american-express',\n  DINERS_CLUB: 'diners-club',\n  DISCOVER: 'discover',\n  JCB: 'jcb',\n  UNIONPAY: 'unionpay',\n  MAESTRO: 'maestro',\n  ELO: 'elo',\n  MIR: 'mir',\n  HIPER: 'hiper',\n  HIPERCARD: 'hipercard'\n};\nvar ORIGINAL_TEST_ORDER = [cardNames.VISA, cardNames.MASTERCARD, cardNames.AMERICAN_EXPRESS, cardNames.DINERS_CLUB, cardNames.DISCOVER, cardNames.JCB, cardNames.UNIONPAY, cardNames.MAESTRO, cardNames.ELO, cardNames.MIR, cardNames.HIPER, cardNames.HIPERCARD];\ntestOrder = clone(ORIGINAL_TEST_ORDER);\n\nfunction findType(type) {\n  return customCards[type] || types[type];\n}\n\nfunction getAllCardTypes() {\n  return testOrder.map(function (type) {\n    return clone(findType(type));\n  });\n}\n\nfunction getCardPosition(name, ignoreErrorForNotExisting) {\n  var position = testOrder.indexOf(name);\n\n  if (!ignoreErrorForNotExisting && position === -1) {\n    throw new Error('\"' + name + '\" is not a supported card type.');\n  }\n\n  return position;\n}\n\nfunction creditCardType(cardNumber) {\n  var bestMatch;\n  var results = [];\n\n  if (!isValidInputType(cardNumber)) {\n    return [];\n  }\n\n  if (cardNumber.length === 0) {\n    return getAllCardTypes(testOrder);\n  }\n\n  testOrder.forEach(function (type) {\n    var cardConfiguration = findType(type);\n    addMatchingCardsToResults(cardNumber, cardConfiguration, results);\n  });\n  bestMatch = findBestMatch(results);\n\n  if (bestMatch) {\n    return [bestMatch];\n  }\n\n  return results;\n}\n\ncreditCardType.getTypeInfo = function (type) {\n  return clone(findType(type));\n};\n\ncreditCardType.removeCard = function (name) {\n  var position = getCardPosition(name);\n  testOrder.splice(position, 1);\n};\n\ncreditCardType.addCard = function (config) {\n  var existingCardPosition = getCardPosition(config.type, true);\n  customCards[config.type] = config;\n\n  if (existingCardPosition === -1) {\n    testOrder.push(config.type);\n  }\n};\n\ncreditCardType.updateCard = function (cardType, updates) {\n  var clonedCard;\n  var originalObject = customCards[cardType] || types[cardType];\n\n  if (!originalObject) {\n    throw new Error('\"' + cardType + '\" is not a recognized type. Use `addCard` instead.');\n  }\n\n  if (updates.type && originalObject.type !== updates.type) {\n    throw new Error('Cannot overwrite type parameter.');\n  }\n\n  clonedCard = clone(originalObject, true);\n  Object.keys(clonedCard).forEach(function (key) {\n    if (updates[key]) {\n      clonedCard[key] = updates[key];\n    }\n  });\n  customCards[clonedCard.type] = clonedCard;\n};\n\ncreditCardType.changeOrder = function (name, position) {\n  var currentPosition = getCardPosition(name);\n  testOrder.splice(currentPosition, 1);\n  testOrder.splice(position, 0, name);\n};\n\ncreditCardType.resetModifications = function () {\n  testOrder = clone(ORIGINAL_TEST_ORDER);\n  customCards = {};\n};\n\ncreditCardType.types = cardNames;\nmodule.exports = creditCardType;","map":{"version":3,"sources":["C:/Users/neelk/Downloads/covid19-hack-master/covid19-hack-master/node_modules/react-native-input-credit-card/node_modules/credit-card-type/index.js"],"names":["types","require","clone","findBestMatch","isValidInputType","addMatchingCardsToResults","testOrder","customCards","cardNames","VISA","MASTERCARD","AMERICAN_EXPRESS","DINERS_CLUB","DISCOVER","JCB","UNIONPAY","MAESTRO","ELO","MIR","HIPER","HIPERCARD","ORIGINAL_TEST_ORDER","findType","type","getAllCardTypes","map","getCardPosition","name","ignoreErrorForNotExisting","position","indexOf","Error","creditCardType","cardNumber","bestMatch","results","length","forEach","cardConfiguration","getTypeInfo","removeCard","splice","addCard","config","existingCardPosition","push","updateCard","cardType","updates","clonedCard","originalObject","Object","keys","key","changeOrder","currentPosition","resetModifications","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar types = require('./lib/card-types');\nvar clone = require('./lib/clone');\nvar findBestMatch = require('./lib/find-best-match');\nvar isValidInputType = require('./lib/is-valid-input-type');\nvar addMatchingCardsToResults = require('./lib/add-matching-cards-to-results');\n\nvar testOrder;\nvar customCards = {};\n\nvar cardNames = {\n  VISA: 'visa',\n  MASTERCARD: 'mastercard',\n  AMERICAN_EXPRESS: 'american-express',\n  DINERS_CLUB: 'diners-club',\n  DISCOVER: 'discover',\n  JCB: 'jcb',\n  UNIONPAY: 'unionpay',\n  MAESTRO: 'maestro',\n  ELO: 'elo',\n  MIR: 'mir',\n  HIPER: 'hiper',\n  HIPERCARD: 'hipercard'\n};\n\nvar ORIGINAL_TEST_ORDER = [\n  cardNames.VISA,\n  cardNames.MASTERCARD,\n  cardNames.AMERICAN_EXPRESS,\n  cardNames.DINERS_CLUB,\n  cardNames.DISCOVER,\n  cardNames.JCB,\n  cardNames.UNIONPAY,\n  cardNames.MAESTRO,\n  cardNames.ELO,\n  cardNames.MIR,\n  cardNames.HIPER,\n  cardNames.HIPERCARD\n];\n\ntestOrder = clone(ORIGINAL_TEST_ORDER);\n\nfunction findType(type) {\n  return customCards[type] || types[type];\n}\n\nfunction getAllCardTypes() {\n  return testOrder.map(function (type) {\n    return clone(findType(type));\n  });\n}\n\nfunction getCardPosition(name, ignoreErrorForNotExisting) {\n  var position = testOrder.indexOf(name);\n\n  if (!ignoreErrorForNotExisting && position === -1) {\n    throw new Error('\"' + name + '\" is not a supported card type.');\n  }\n\n  return position;\n}\n\nfunction creditCardType(cardNumber) {\n  var bestMatch;\n  var results = [];\n\n  if (!isValidInputType(cardNumber)) {\n    return [];\n  }\n\n  if (cardNumber.length === 0) {\n    return getAllCardTypes(testOrder);\n  }\n\n  testOrder.forEach(function (type) {\n    var cardConfiguration = findType(type);\n\n    addMatchingCardsToResults(cardNumber, cardConfiguration, results);\n  });\n\n  bestMatch = findBestMatch(results);\n\n  if (bestMatch) {\n    return [bestMatch];\n  }\n\n  return results;\n}\n\ncreditCardType.getTypeInfo = function (type) {\n  return clone(findType(type));\n};\n\ncreditCardType.removeCard = function (name) {\n  var position = getCardPosition(name);\n\n  testOrder.splice(position, 1);\n};\n\ncreditCardType.addCard = function (config) {\n  var existingCardPosition = getCardPosition(config.type, true);\n\n  customCards[config.type] = config;\n\n  if (existingCardPosition === -1) {\n    testOrder.push(config.type);\n  }\n};\n\ncreditCardType.updateCard = function (cardType, updates) {\n  var clonedCard;\n  var originalObject = customCards[cardType] || types[cardType];\n\n  if (!originalObject) {\n    throw new Error('\"' + cardType + '\" is not a recognized type. Use `addCard` instead.');\n  }\n\n  if (updates.type && originalObject.type !== updates.type) {\n    throw new Error('Cannot overwrite type parameter.');\n  }\n\n  clonedCard = clone(originalObject, true);\n\n  Object.keys(clonedCard).forEach(function (key) {\n    if (updates[key]) {\n      clonedCard[key] = updates[key];\n    }\n  });\n\n  customCards[clonedCard.type] = clonedCard;\n};\n\ncreditCardType.changeOrder = function (name, position) {\n  var currentPosition = getCardPosition(name);\n\n  testOrder.splice(currentPosition, 1);\n  testOrder.splice(position, 0, name);\n};\n\ncreditCardType.resetModifications = function () {\n  testOrder = clone(ORIGINAL_TEST_ORDER);\n  customCards = {};\n};\n\ncreditCardType.types = cardNames;\n\nmodule.exports = creditCardType;\n"]},"metadata":{},"sourceType":"script"}