{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\neelk\\\\Documents\\\\GitHub\\\\covid19-hack\\\\node_modules\\\\@react-native-community\\\\masked-view\\\\js\\\\MaskedView.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { requireNativeComponent } from \"react-native-web/dist/index\";\nvar RNCMaskedView = requireNativeComponent('RNCMaskedView');\n\nvar MaskedViewIOS = function (_React$Component) {\n  _inherits(MaskedViewIOS, _React$Component);\n\n  var _super = _createSuper(MaskedViewIOS);\n\n  function MaskedViewIOS() {\n    var _this;\n\n    _classCallCheck(this, MaskedViewIOS);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this._hasWarnedInvalidRenderMask = false;\n    return _this;\n  }\n\n  _createClass(MaskedViewIOS, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          maskElement = _this$props.maskElement,\n          children = _this$props.children,\n          otherViewProps = _objectWithoutProperties(_this$props, [\"maskElement\", \"children\"]);\n\n      if (!React.isValidElement(maskElement)) {\n        if (!this._hasWarnedInvalidRenderMask) {\n          console.warn('MaskedView: Invalid `maskElement` prop was passed to MaskedView. ' + 'Expected a React Element. No mask will render.');\n          this._hasWarnedInvalidRenderMask = true;\n        }\n\n        return React.createElement(View, _extends({}, otherViewProps, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 14\n          }\n        }), children);\n      }\n\n      return React.createElement(RNCMaskedView, _extends({}, otherViewProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 7\n        }\n      }), React.createElement(View, {\n        pointerEvents: \"none\",\n        style: StyleSheet.absoluteFill,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 9\n        }\n      }, maskElement), children);\n    }\n  }]);\n\n  return MaskedViewIOS;\n}(React.Component);\n\nmodule.exports = MaskedViewIOS;","map":{"version":3,"sources":["C:/Users/neelk/Documents/GitHub/covid19-hack/node_modules/@react-native-community/masked-view/js/MaskedView.js"],"names":["React","requireNativeComponent","RNCMaskedView","MaskedViewIOS","_hasWarnedInvalidRenderMask","props","maskElement","children","otherViewProps","isValidElement","console","warn","StyleSheet","absoluteFill","Component","module","exports"],"mappings":";;;;;;;;;;;;;AAUA,OAAOA,KAAP,MAAkB,OAAlB;;;SAC2BC,sB;AAE3B,IAAMC,aAAa,GAAGD,sBAAsB,CAAC,eAAD,CAA5C;;IAyCME,a;;;;;;;;;;;;;;;UACJC,2B,GAA8B,K;;;;;;6BAErB;AAAA,wBAC8C,KAAKC,KADnD;AAAA,UACCC,WADD,eACCA,WADD;AAAA,UACcC,QADd,eACcA,QADd;AAAA,UAC2BC,cAD3B;;AAGP,UAAI,CAACR,KAAK,CAACS,cAAN,CAAqBH,WAArB,CAAL,EAAwC;AACtC,YAAI,CAAC,KAAKF,2BAAV,EAAuC;AAErCM,UAAAA,OAAO,CAACC,IAAR,CACE,sEACE,gDAFJ;AAIA,eAAKP,2BAAL,GAAmC,IAAnC;AACD;;AAED,eAAO,oBAAC,IAAD,eAAUI,cAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAA2BD,QAA3B,CAAP;AACD;;AAED,aAEE,oBAAC,aAAD,eAAmBC,cAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UACE,oBAAC,IAAD;AAAM,QAAA,aAAa,EAAC,MAApB;AAA2B,QAAA,KAAK,EAAEI,UAAU,CAACC,YAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGP,WADH,CADF,EAIGC,QAJH,CAFF;AASD;;;;EA5ByBP,KAAK,CAACc,S;;AA+BlCC,MAAM,CAACC,OAAP,GAAiBb,aAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\nimport React from 'react';\nimport { View, StyleSheet, requireNativeComponent } from 'react-native';\n\nconst RNCMaskedView = requireNativeComponent('RNCMaskedView');\n\nimport { type MaskedViewProps } from './MaskedViewTypes';\n\n/**\n * Renders the child view with a mask specified in the `maskElement` prop.\n *\n * ```\n * import React from 'react';\n * import { Text, View } from 'react-native';\n * import MaskedView from 'react-native-masked-view';\n *\n * class MyMaskedView extends React.Component {\n *   render() {\n *     return (\n *       <MaskedView\n *         style={{ flex: 1 }}\n *         maskElement={\n *           <View style={styles.maskContainerStyle}>\n *             <Text style={styles.maskTextStyle}>\n *               Basic Mask\n *             </Text>\n *           </View>\n *         }\n *       >\n *         <View style={{ flex: 1, backgroundColor: 'blue' }} />\n *       </MaskedView>\n *     );\n *   }\n * }\n * ```\n *\n * The above example will render a view with a blue background that fills its\n * parent, and then mask that view with text that says \"Basic Mask\".\n *\n * The alpha channel of the view rendered by the `maskElement` prop determines how\n * much of the view's content and background shows through. Fully or partially\n * opaque pixels allow the underlying content to show through but fully\n * transparent pixels block that content.\n *\n */\nclass MaskedViewIOS extends React.Component<MaskedViewProps> {\n  _hasWarnedInvalidRenderMask = false;\n\n  render() {\n    const { maskElement, children, ...otherViewProps } = this.props;\n\n    if (!React.isValidElement(maskElement)) {\n      if (!this._hasWarnedInvalidRenderMask) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          'MaskedView: Invalid `maskElement` prop was passed to MaskedView. ' +\n            'Expected a React Element. No mask will render.'\n        );\n        this._hasWarnedInvalidRenderMask = true;\n      }\n      // $FlowFixMe\n      return <View {...otherViewProps}>{children}</View>;\n    }\n\n    return (\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      <RNCMaskedView {...otherViewProps}>\n        <View pointerEvents=\"none\" style={StyleSheet.absoluteFill}>\n          {maskElement}\n        </View>\n        {children}\n      </RNCMaskedView>\n    );\n  }\n}\n\nmodule.exports = MaskedViewIOS;\n"]},"metadata":{},"sourceType":"module"}