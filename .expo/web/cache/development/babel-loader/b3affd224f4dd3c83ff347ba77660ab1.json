{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport Animated from \"react-native-reanimated\";\nimport { useMemoOne } from \"use-memo-one\";\nimport { min } from \"./Math\";\nvar Clock = Animated.Clock,\n    Value = Animated.Value,\n    set = Animated.set,\n    add = Animated.add,\n    multiply = Animated.multiply,\n    cond = Animated.cond,\n    eq = Animated.eq,\n    abs = Animated.abs,\n    sub = Animated.sub,\n    interpolate = Animated.interpolate,\n    not = Animated.not,\n    diff = Animated.diff,\n    lessThan = Animated.lessThan,\n    greaterThan = Animated.greaterThan,\n    useCode = Animated.useCode,\n    divide = Animated.divide,\n    modulo = Animated.modulo,\n    proc = Animated.proc;\nexport var moving = function moving(position) {\n  var minPositionDelta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1e-3;\n  var emptyFrameThreshold = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 5;\n  var delta = diff(position);\n  var noMovementFrames = new Value(0);\n  return cond(lessThan(abs(delta), minPositionDelta), [set(noMovementFrames, add(noMovementFrames, 1)), not(greaterThan(noMovementFrames, emptyFrameThreshold))], [set(noMovementFrames, 0), 1]);\n};\nexport var snapPoint = function snapPoint(value, velocity, points) {\n  var point = add(value, multiply(0.2, velocity));\n\n  var diffPoint = function diffPoint(p) {\n    return abs(sub(point, p));\n  };\n\n  var deltas = points.map(function (p) {\n    return diffPoint(p);\n  });\n  var minDelta = min.apply(void 0, _toConsumableArray(deltas));\n  return points.reduce(function (acc, p) {\n    return cond(eq(diffPoint(p), minDelta), p, acc);\n  }, new Value());\n};\nexport var bInterpolate = function bInterpolate(value, origin, destination) {\n  return interpolate(value, {\n    inputRange: [0, 1],\n    outputRange: [origin, destination]\n  });\n};\nexport var useValues = function useValues(values, deps) {\n  return useMemoOne(function () {\n    return values.map(function (v) {\n      return new Value(v);\n    });\n  }, deps);\n};\nexport var useNamedValues = function useNamedValues(values, deps) {\n  return useMemoOne(function () {\n    var result = {};\n    Object.keys(values).forEach(function (key) {\n      result[key] = new Value(values[key]);\n    });\n    return result;\n  }, deps);\n};\nexport var useClocks = function useClocks(numberOfClocks, deps) {\n  return useMemoOne(function () {\n    return new Array(numberOfClocks).fill(0).map(function () {\n      return new Clock();\n    });\n  }, [deps]);\n};\nexport var useDiff = function useDiff(node, deps) {\n  var _useValues = useValues([0], deps),\n      _useValues2 = _slicedToArray(_useValues, 1),\n      dDiff = _useValues2[0];\n\n  useCode(function () {\n    return set(dDiff, diff(node));\n  }, [dDiff, node]);\n  return dDiff;\n};\nexport var addTo = proc(function (value, node) {\n  return set(value, add(value, node));\n});\nexport var subTo = proc(function (value, node) {\n  return set(value, sub(value, node));\n});\nexport var multiplyTo = proc(function (value, node) {\n  return set(value, multiply(value, node));\n});\nexport var divideTo = proc(function (value, node) {\n  return set(value, divide(value, node));\n});\nexport var moduloTo = proc(function (value, node) {\n  return set(value, modulo(value, node));\n});","map":{"version":3,"sources":["Animations.ts"],"names":["Clock","Value","set","add","multiply","cond","eq","abs","sub","interpolate","not","diff","lessThan","greaterThan","useCode","divide","modulo","proc","Animated","moving","minPositionDelta","emptyFrameThreshold","delta","noMovementFrames","snapPoint","point","diffPoint","deltas","points","minDelta","min","bInterpolate","inputRange","outputRange","useValues","useMemoOne","values","useNamedValues","result","Object","useClocks","useDiff","dDiff","addTo","subTo","multiplyTo","divideTo","moduloTo"],"mappings":";;AAAA,OAAA,QAAA,MAAA,yBAAA;AACA,SAAA,UAAA,QAAA,cAAA;AAEA,SAAA,GAAA;AAGEA,IAAAA,K,GAkBEkB,Q,CAlBFlB,KAAAA;AAAAA,IACAC,K,GAiBEiB,Q,CAjBFjB,KADAD;AAAAA,IAEAE,G,GAgBEgB,Q,CAhBFhB,GAFAF;AAAAA,IAGAG,G,GAeEe,Q,CAfFf,GAHAH;AAAAA,IAIAI,Q,GAcEc,Q,CAdFd,QAJAJ;AAAAA,IAKAK,I,GAaEa,Q,CAbFb,IALAL;AAAAA,IAMAM,E,GAYEY,Q,CAZFZ,EANAN;AAAAA,IAOAO,G,GAWEW,Q,CAXFX,GAPAP;AAAAA,IAQAQ,G,GAUEU,Q,CAVFV,GARAR;AAAAA,IASAS,W,GASES,Q,CATFT,WATAT;AAAAA,IAUAU,G,GAQEQ,Q,CARFR,GAVAV;AAAAA,IAWAW,I,GAOEO,Q,CAPFP,IAXAX;AAAAA,IAYAY,Q,GAMEM,Q,CANFN,QAZAZ;AAAAA,IAaAa,W,GAKEK,Q,CALFL,WAbAb;AAAAA,IAcAc,O,GAIEI,Q,CAJFJ,OAdAd;AAAAA,IAeAe,M,GAGEG,Q,CAHFH,MAfAf;AAAAA,IAgBAgB,M,GAEEE,Q,CAFFF,MAhBAhB;AAAAA,IAiBAiB,I,GACEC,Q,CADFD,IAjBAjB;AAuBF,OAAO,IAAMmB,MAAM,GAANA,SAAAA,MAAAA,CAAS,QAATA,EAIR;AAFHC,MAAAA,gBAEG,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAFgB,IAAnBA;AACAC,MAAAA,mBACG,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GADmB,CAAtBA;AAEA,MAAMC,KAAK,GAAGX,IAAI,CAAlB,QAAkB,CAAlB;AACA,MAAMY,gBAAgB,GAAG,IAAA,KAAA,CAAzB,CAAyB,CAAzB;AACA,SAAOlB,IAAI,CACTO,QAAQ,CAACL,GAAG,CAAJ,KAAI,CAAJ,EADC,gBACD,CADC,EAET,CACEL,GAAG,CAAA,gBAAA,EAAmBC,GAAG,CAAA,gBAAA,EAD3B,CAC2B,CAAtB,CADL,EAEEO,GAAG,CAACG,WAAW,CAAA,gBAAA,EAJR,mBAIQ,CAAZ,CAFL,CAFS,EAMT,CAACX,GAAG,CAAA,gBAAA,EAAJ,CAAI,CAAJ,EANF,CAME,CANS,CAAX;AAPK,CAAA;AAiBP,OAAO,IAAMsB,SAAS,GAATA,SAAAA,SAAAA,CAAY,KAAZA,EAAY,QAAZA,EAAY,MAAZA,EAIR;AACH,MAAMC,KAAK,GAAGtB,GAAG,CAAA,KAAA,EAAQC,QAAQ,CAAA,GAAA,EAAjC,QAAiC,CAAhB,CAAjB;;AACA,MAAMsB,SAAS,GAATA,SAAAA,SAAAA,CAAY,CAAZA,EAAY;AAAA,WAAmCnB,GAAG,CAACC,GAAG,CAAA,KAAA,EAA1C,CAA0C,CAAJ,CAAtC;AAAlB,GAAA;;AACA,MAAMmB,MAAM,GAAGC,MAAM,CAANA,GAAAA,CAAW,UAAA,CAAA,EAAC;AAAA,WAAIF,SAAS,CAAb,CAAa,CAAb;AAA3B,GAAeE,CAAf;AACA,MAAMC,QAAQ,GAAGC,GAAG,CAAHA,KAAAA,CAAAA,KAAAA,CAAAA,EAAAA,kBAAAA,CAAjB,MAAiBA,CAAAA,CAAjB;AACA,SAAOF,MAAM,CAANA,MAAAA,CACL,UAAA,GAAA,EAAA,CAAA,EAAA;AAAA,WAAYvB,IAAI,CAACC,EAAE,CAACoB,SAAS,CAAV,CAAU,CAAV,EAAH,QAAG,CAAH,EAAA,CAAA,EAAhB,GAAgB,CAAhB;AADKE,GAAAA,EAEL,IAFF,KAEE,EAFKA,CAAP;AATK,CAAA;AAeP,OAAO,IAAMG,YAAY,GAAZA,SAAAA,YAAAA,CAAe,KAAfA,EAAe,MAAfA,EAAe,WAAfA,EAAe;AAAA,SAK1BtB,WAAW,CAAA,KAAA,EAAQ;AACjBuB,IAAAA,UAAU,EAAE,CAAA,CAAA,EADK,CACL,CADK;AAEjBC,IAAAA,WAAW,EAAE,CAAA,MAAA,EAPW,WAOX;AAFI,GAAR,CALe;AAArB,CAAA;AAaP,OAAO,IAAMC,SAAS,GAATA,SAAAA,SAAAA,CAAY,MAAZA,EAAY,IAAZA,EAAY;AAAA,SAKvBC,UAAU,CAAC,YAAA;AAAA,WAAMC,MAAM,CAANA,GAAAA,CAAW,UAAA,CAAA,EAAC;AAAA,aAAI,IAAA,KAAA,CAAJ,CAAI,CAAJ;AAAlB,KAAMA,CAAN;AAAD,GAAA,EALa,IAKb,CALa;AAAlB,CAAA;AAOP,OAAO,IAAMC,cAAc,GAAdA,SAAAA,cAAAA,CAAiB,MAAjBA,EAAiB,IAAjBA,EAAiB;AAAA,SAI5BF,UAAU,CAAC,YAAM;AACf,QAAMG,MAAyC,GAA/C,EAAA;AACAC,IAAAA,MAAM,CAANA,IAAAA,CAAAA,MAAAA,EAAAA,OAAAA,CAA4B,UAAA,GAAA,EAAO;AACjCD,MAAAA,MAAM,CAANA,GAAM,CAANA,GAAmB,IAAA,KAAA,CAAUF,MAAM,CAAnCE,GAAmC,CAAhB,CAAnBA;AADFC,KAAAA;AAGA,WAAA,MAAA;AALQ,GAAA,EAJkB,IAIlB,CAJkB;AAAvB,CAAA;AAaP,OAAO,IAAMC,SAAS,GAATA,SAAAA,SAAAA,CAAY,cAAZA,EAAY,IAAZA,EAAY;AAAA,SAKvBL,UAAU,CAAC,YAAA;AAAA,WAAM,IAAA,KAAA,CAAA,cAAA,EAAA,IAAA,CAAA,CAAA,EAAA,GAAA,CAAsC,YAAA;AAAA,aAAM,IAAN,KAAM,EAAN;AAA5C,KAAM,CAAN;AAAD,GAAA,EAAiE,CALpD,IAKoD,CAAjE,CALa;AAAlB,CAAA;AASP,OAAO,IAAMM,OAAO,GAAPA,SAAAA,OAAAA,CAAU,IAAVA,EAAU,IAAVA,EAA+D;AAAA,MAAA,UAAA,GAC1DP,SAAS,CAAS,CAAT,CAAS,CAAT,EADiD,IACjD,CADiD;AAAA,MAAA,WAAA,GAAA,cAAA,CAAA,UAAA,EAAA,CAAA,CAAA;AAAA,MACnEQ,KADmE,GAAA,WAAA,CAAA,CAAA,CAAA;;AAE1E5B,EAAAA,OAAO,CAAC,YAAA;AAAA,WAAMZ,GAAG,CAAA,KAAA,EAAQS,IAAI,CAArB,IAAqB,CAAZ,CAAT;AAAD,GAAA,EAA+B,CAAA,KAAA,EAAtCG,IAAsC,CAA/B,CAAPA;AACA,SAAA,KAAA;AAHK,CAAA;AAMP,OAAO,IAAM6B,KAAK,GAAG1B,IAAI,CACvB,UAAA,KAAA,EAAA,IAAA,EAAA;AAAA,SACEf,GAAG,CAAA,KAAA,EAAQC,GAAG,CAAA,KAAA,EADhB,IACgB,CAAX,CADL;AADK,CAAkB,CAAlB;AAKP,OAAO,IAAMyC,KAAK,GAAG3B,IAAI,CACvB,UAAA,KAAA,EAAA,IAAA,EAAA;AAAA,SACEf,GAAG,CAAA,KAAA,EAAQM,GAAG,CAAA,KAAA,EADhB,IACgB,CAAX,CADL;AADK,CAAkB,CAAlB;AAKP,OAAO,IAAMqC,UAAU,GAAG5B,IAAI,CAC5B,UAAA,KAAA,EAAA,IAAA,EAAA;AAAA,SACEf,GAAG,CAAA,KAAA,EAAQE,QAAQ,CAAA,KAAA,EADrB,IACqB,CAAhB,CADL;AADK,CAAuB,CAAvB;AAKP,OAAO,IAAM0C,QAAQ,GAAG7B,IAAI,CAC1B,UAAA,KAAA,EAAA,IAAA,EAAA;AAAA,SACEf,GAAG,CAAA,KAAA,EAAQa,MAAM,CAAA,KAAA,EADnB,IACmB,CAAd,CADL;AADK,CAAqB,CAArB;AAKP,OAAO,IAAMgC,QAAQ,GAAG9B,IAAI,CAC1B,UAAA,KAAA,EAAA,IAAA,EAAA;AAAA,SACEf,GAAG,CAAA,KAAA,EAAQc,MAAM,CAAA,KAAA,EADnB,IACmB,CAAd,CADL;AADK,CAAqB,CAArB","sourcesContent":["import Animated from \"react-native-reanimated\";\nimport { useMemoOne } from \"use-memo-one\";\n\nimport { min } from \"./Math\";\n\nconst {\n  Clock,\n  Value,\n  set,\n  add,\n  multiply,\n  cond,\n  eq,\n  abs,\n  sub,\n  interpolate,\n  not,\n  diff,\n  lessThan,\n  greaterThan,\n  useCode,\n  divide,\n  modulo,\n  proc\n} = Animated;\n\nexport type SpringConfig = Partial<Omit<Animated.SpringConfig, \"toValue\">>;\nexport type TimingConfig = Partial<Omit<Animated.TimingConfig, \"toValue\">>;\n\nexport const moving = (\n  position: Animated.Node<number>,\n  minPositionDelta = 1e-3,\n  emptyFrameThreshold = 5\n) => {\n  const delta = diff(position);\n  const noMovementFrames = new Value(0);\n  return cond(\n    lessThan(abs(delta), minPositionDelta),\n    [\n      set(noMovementFrames, add(noMovementFrames, 1)),\n      not(greaterThan(noMovementFrames, emptyFrameThreshold))\n    ],\n    [set(noMovementFrames, 0), 1]\n  );\n};\n\nexport const snapPoint = (\n  value: Animated.Adaptable<number>,\n  velocity: Animated.Adaptable<number>,\n  points: Animated.Adaptable<number>[]\n) => {\n  const point = add(value, multiply(0.2, velocity));\n  const diffPoint = (p: Animated.Adaptable<number>) => abs(sub(point, p));\n  const deltas = points.map(p => diffPoint(p));\n  const minDelta = min(...deltas);\n  return points.reduce(\n    (acc, p) => cond(eq(diffPoint(p), minDelta), p, acc),\n    new Value()\n  );\n};\n\nexport const bInterpolate = (\n  value: Animated.Adaptable<number>,\n  origin: Animated.Adaptable<number>,\n  destination: Animated.Adaptable<number>\n) =>\n  interpolate(value, {\n    inputRange: [0, 1],\n    outputRange: [origin, destination]\n  });\n\ntype Dependencies = readonly unknown[];\ntype Atomic = string | number | boolean;\n\nexport const useValues = <V extends Atomic>(\n  values: V[],\n  deps: Dependencies\n): Animated.Value<V>[] =>\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useMemoOne(() => values.map(v => new Value(v)), deps);\n\nexport const useNamedValues = <V extends Atomic, K extends string>(\n  values: Record<K, V>,\n  deps: Dependencies\n): Record<K, Animated.Value<V>> =>\n  useMemoOne(() => {\n    const result: Record<string, Animated.Value<V>> = {};\n    Object.keys(values).forEach(key => {\n      result[key as K] = new Value(values[key as K]);\n    });\n    return result;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n\nexport const useClocks = (\n  numberOfClocks: number,\n  deps: Dependencies\n): Animated.Clock[] =>\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useMemoOne(() => new Array(numberOfClocks).fill(0).map(() => new Clock()), [\n    deps\n  ]);\n\nexport const useDiff = (node: Animated.Node<number>, deps: Dependencies) => {\n  const [dDiff] = useValues<number>([0], deps);\n  useCode(() => set(dDiff, diff(node)), [dDiff, node]);\n  return dDiff;\n};\n\nexport const addTo = proc(\n  (value: Animated.Value<number>, node: Animated.Adaptable<number>) =>\n    set(value, add(value, node))\n);\n\nexport const subTo = proc(\n  (value: Animated.Value<number>, node: Animated.Adaptable<number>) =>\n    set(value, sub(value, node))\n);\n\nexport const multiplyTo = proc(\n  (value: Animated.Value<number>, node: Animated.Adaptable<number>) =>\n    set(value, multiply(value, node))\n);\n\nexport const divideTo = proc(\n  (value: Animated.Value<number>, node: Animated.Adaptable<number>) =>\n    set(value, divide(value, node))\n);\n\nexport const moduloTo = proc(\n  (value: Animated.Value<number>, node: Animated.Adaptable<number>) =>\n    set(value, modulo(value, node))\n);\n"]},"metadata":{},"sourceType":"module"}