{"ast":null,"code":"import Animated from \"react-native-reanimated\";\nvar set = Animated.set,\n    cond = Animated.cond,\n    add = Animated.add,\n    multiply = Animated.multiply,\n    lessThan = Animated.lessThan,\n    abs = Animated.abs,\n    divide = Animated.divide,\n    sub = Animated.sub,\n    min2 = Animated.min,\n    max2 = Animated.max,\n    greaterThan = Animated.greaterThan,\n    pow = Animated.pow,\n    and = Animated.and,\n    greaterOrEq = Animated.greaterOrEq,\n    lessOrEq = Animated.lessOrEq,\n    proc = Animated.proc;\nexport var bin = function bin(value) {\n  return value ? 1 : 0;\n};\nexport var inc = function inc(value) {\n  return set(value, add(value, 1));\n};\nexport var dec = function dec(value) {\n  return set(value, sub(value, 1));\n};\nexport var min = function min() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return args.reduce(function (acc, arg) {\n    return min2(acc, arg);\n  });\n};\nexport var max = function max() {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  return args.reduce(function (acc, arg) {\n    return max2(acc, arg);\n  });\n};\nexport var clamp = function clamp(value, lowerBound, upperBound) {\n  return min2(max2(lowerBound, value), upperBound);\n};\nexport var between = function between(value, lowerBound, upperBound) {\n  var inclusive = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n  if (inclusive) {\n    return and(greaterOrEq(value, lowerBound), lessOrEq(value, upperBound));\n  }\n\n  return and(greaterThan(value, lowerBound), lessThan(value, upperBound));\n};\nexport var approximates = function approximates(a, b) {\n  var precision = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.001;\n  return lessThan(abs(sub(a, b)), precision);\n};\nexport var toRad = function toRad(deg) {\n  return multiply(deg, Math.PI / 180);\n};\nexport var toDeg = function toDeg(rad) {\n  return multiply(rad, 180 / Math.PI);\n};\nvar atan2Proc = proc(function (y, x) {\n  var coeff1 = Math.PI / 4;\n  var coeff2 = 3 * coeff1;\n  var absY = abs(y);\n  var angle = cond(greaterOrEq(x, 0), [sub(coeff1, multiply(coeff1, divide(sub(x, absY), add(x, absY))))], [sub(coeff2, multiply(coeff1, divide(add(x, absY), sub(absY, x))))]);\n  return cond(lessThan(y, 0), multiply(angle, -1), angle);\n});\nexport var atan2 = function atan2(y, x) {\n  return atan2Proc(y, x);\n};\nexport var cubicBezier = function cubicBezier(t, p0, p1, p2, p3) {\n  var term = sub(1, t);\n  var a = multiply(1, pow(term, 3), pow(t, 0), p0);\n  var b = multiply(3, pow(term, 2), pow(t, 1), p1);\n  var c = multiply(3, pow(term, 1), pow(t, 2), p2);\n  var d = multiply(1, pow(term, 0), pow(t, 3), p3);\n  return add(a, b, c, d);\n};","map":{"version":3,"sources":["Math.ts"],"names":["set","cond","add","multiply","lessThan","abs","divide","sub","min","min2","max","max2","greaterThan","pow","and","greaterOrEq","lessOrEq","proc","Animated","bin","value","inc","dec","args","clamp","between","inclusive","approximates","precision","toRad","Math","toDeg","atan2Proc","coeff1","coeff2","absY","angle","atan2","cubicBezier","term","a","b","c","d"],"mappings":"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","sourcesContent":["import Animated from \"react-native-reanimated\";\n\nconst {\n  set,\n  cond,\n  add,\n  multiply,\n  lessThan,\n  abs,\n  divide,\n  sub,\n  min: min2,\n  max: max2,\n  greaterThan,\n  pow,\n  and,\n  greaterOrEq,\n  lessOrEq,\n  proc\n} = Animated;\n\nexport const bin = (value: boolean): 0 | 1 => (value ? 1 : 0);\n\nexport const inc = (value: Animated.Value<number>) => set(value, add(value, 1));\n\nexport const dec = (value: Animated.Value<number>) => set(value, sub(value, 1));\n\nexport const min = (...args: Animated.Adaptable<number>[]) =>\n  args.reduce((acc, arg) => min2(acc, arg));\n\nexport const max = (...args: Animated.Adaptable<number>[]) =>\n  args.reduce((acc, arg) => max2(acc, arg));\n\nexport const clamp = (\n  value: Animated.Adaptable<number>,\n  lowerBound: Animated.Adaptable<number>,\n  upperBound: Animated.Adaptable<number>\n): Animated.Node<number> => min2(max2(lowerBound, value), upperBound);\n\nexport const between = (\n  value: Animated.Node<number>,\n  lowerBound: Animated.Adaptable<number>,\n  upperBound: Animated.Adaptable<number>,\n  inclusive = true\n) => {\n  if (inclusive) {\n    return and(greaterOrEq(value, lowerBound), lessOrEq(value, upperBound));\n  }\n  return and(greaterThan(value, lowerBound), lessThan(value, upperBound));\n};\n\nexport const approximates = (\n  a: Animated.Adaptable<number>,\n  b: Animated.Adaptable<number>,\n  precision: Animated.Adaptable<number> = 0.001\n) => lessThan(abs(sub(a, b)), precision);\n\nexport const toRad = (deg: Animated.Adaptable<number>): Animated.Node<number> =>\n  multiply(deg, Math.PI / 180);\n\nexport const toDeg = (rad: Animated.Adaptable<number>): Animated.Node<number> =>\n  multiply(rad, 180 / Math.PI);\n\n// https://en.wikipedia.org/wiki/Atan2\n// https://www.gamedev.net/forums/topic/441464-manually-implementing-atan2-or-atan/\n// https://developer.download.nvidia.com/cg/atan2.html\nconst atan2Proc = proc(\n  (y: Animated.Adaptable<number>, x: Animated.Adaptable<number>) => {\n    const coeff1 = Math.PI / 4;\n    const coeff2 = 3 * coeff1;\n    const absY = abs(y);\n    const angle = cond(\n      greaterOrEq(x, 0),\n      [sub(coeff1, multiply(coeff1, divide(sub(x, absY), add(x, absY))))],\n      [sub(coeff2, multiply(coeff1, divide(add(x, absY), sub(absY, x))))]\n    );\n    return cond(lessThan(y, 0), multiply(angle, -1), angle);\n  }\n);\n\nexport const atan2 = (\n  y: Animated.Adaptable<number>,\n  x: Animated.Adaptable<number>\n): Animated.Node<number> => atan2Proc(y, x);\n\nexport const cubicBezier = (\n  t: Animated.Adaptable<number>,\n  p0: Animated.Adaptable<number>,\n  p1: Animated.Adaptable<number>,\n  p2: Animated.Adaptable<number>,\n  p3: Animated.Adaptable<number>\n): Animated.Node<number> => {\n  const term = sub(1, t);\n  const a = multiply(1, pow(term, 3), pow(t, 0), p0);\n  const b = multiply(3, pow(term, 2), pow(t, 1), p1);\n  const c = multiply(3, pow(term, 1), pow(t, 2), p2);\n  const d = multiply(1, pow(term, 0), pow(t, 3), p3);\n  return add(a, b, c, d);\n};\n"]},"metadata":{},"sourceType":"module"}