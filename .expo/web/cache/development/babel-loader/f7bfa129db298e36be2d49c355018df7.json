{"ast":null,"code":"import Animated from \"react-native-reanimated\";\nimport processColor from \"react-native-web/dist/exports/processColor\";\nvar cond = Animated.cond,\n    add = Animated.add,\n    multiply = Animated.multiply,\n    lessThan = Animated.lessThan,\n    abs = Animated.abs,\n    modulo = Animated.modulo,\n    round = Animated.round,\n    interpolate = Animated.interpolate,\n    divide = Animated.divide,\n    sub = Animated.sub,\n    color = Animated.color,\n    Extrapolate = Animated.Extrapolate;\nexport var opacity = function opacity(c) {\n  return (c >> 24 & 255) / 255;\n};\nexport var red = function red(c) {\n  return c >> 16 & 255;\n};\nexport var green = function green(c) {\n  return c >> 8 & 255;\n};\nexport var blue = function blue(c) {\n  return c & 255;\n};\n\nfunction match(condsAndResPairs) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n  if (condsAndResPairs.length - offset === 1) {\n    return condsAndResPairs[offset];\n  }\n\n  if (condsAndResPairs.length - offset === 0) {\n    return undefined;\n  }\n\n  return cond(condsAndResPairs[offset], condsAndResPairs[offset + 1], match(condsAndResPairs, offset + 2));\n}\n\nfunction colorHSV(h, s, v) {\n  var c = multiply(v, s);\n  var hh = divide(h, 60);\n  var x = multiply(c, sub(1, abs(sub(modulo(hh, 2), 1))));\n  var m = sub(v, c);\n\n  var colorRGB = function colorRGB(r, g, b) {\n    return color(round(multiply(255, add(r, m))), round(multiply(255, add(g, m))), round(multiply(255, add(b, m))));\n  };\n\n  return match([lessThan(h, 60), colorRGB(c, x, 0), lessThan(h, 120), colorRGB(x, c, 0), lessThan(h, 180), colorRGB(0, c, x), lessThan(h, 240), colorRGB(0, x, c), lessThan(h, 300), colorRGB(x, 0, c), colorRGB(c, 0, x)]);\n}\n\nvar rgbToHsv = function rgbToHsv(c) {\n  var r = red(c) / 255;\n  var g = green(c) / 255;\n  var b = blue(c) / 255;\n  var ma = Math.max(r, g, b);\n  var mi = Math.min(r, g, b);\n  var h = 0;\n  var v = ma;\n  var d = ma - mi;\n  var s = ma === 0 ? 0 : d / ma;\n\n  if (ma === mi) {\n    h = 0;\n  } else {\n    switch (ma) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n\n      case g:\n        h = (b - r) / d + 2;\n        break;\n\n      case b:\n        h = (r - g) / d + 4;\n        break;\n\n      default:\n    }\n\n    h /= 6;\n  }\n\n  return {\n    h: h * 360,\n    s: s,\n    v: v\n  };\n};\n\nvar interpolateColorsHSV = function interpolateColorsHSV(animationValue, inputRange, colors) {\n  var colorsAsHSV = colors.map(function (c) {\n    return rgbToHsv(c);\n  });\n  var h = interpolate(animationValue, {\n    inputRange: inputRange,\n    outputRange: colorsAsHSV.map(function (c) {\n      return c.h;\n    }),\n    extrapolate: Extrapolate.CLAMP\n  });\n  var s = interpolate(animationValue, {\n    inputRange: inputRange,\n    outputRange: colorsAsHSV.map(function (c) {\n      return c.s;\n    }),\n    extrapolate: Extrapolate.CLAMP\n  });\n  var v = interpolate(animationValue, {\n    inputRange: inputRange,\n    outputRange: colorsAsHSV.map(function (c) {\n      return c.v;\n    }),\n    extrapolate: Extrapolate.CLAMP\n  });\n  return colorHSV(h, s, v);\n};\n\nvar interpolateColorsRGB = function interpolateColorsRGB(animationValue, inputRange, colors) {\n  var r = round(interpolate(animationValue, {\n    inputRange: inputRange,\n    outputRange: colors.map(function (c) {\n      return red(c);\n    }),\n    extrapolate: Extrapolate.CLAMP\n  }));\n  var g = round(interpolate(animationValue, {\n    inputRange: inputRange,\n    outputRange: colors.map(function (c) {\n      return green(c);\n    }),\n    extrapolate: Extrapolate.CLAMP\n  }));\n  var b = round(interpolate(animationValue, {\n    inputRange: inputRange,\n    outputRange: colors.map(function (c) {\n      return blue(c);\n    }),\n    extrapolate: Extrapolate.CLAMP\n  }));\n  var a = round(interpolate(animationValue, {\n    inputRange: inputRange,\n    outputRange: colors.map(function (c) {\n      return opacity(c);\n    }),\n    extrapolate: Extrapolate.CLAMP\n  }));\n  return color(r, g, b, a);\n};\n\nexport var interpolateColor = function interpolateColor(value, config) {\n  var colorSpace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"rgb\";\n  var inputRange = config.inputRange;\n  var outputRange = config.outputRange.map(function (c) {\n    return typeof c === \"number\" ? c : processColor(c);\n  });\n\n  if (colorSpace === \"hsv\") {\n    return interpolateColorsHSV(value, inputRange, outputRange);\n  }\n\n  return interpolateColorsRGB(value, inputRange, outputRange);\n};\nexport var bInterpolateColor = function bInterpolateColor(value, color1, color2) {\n  var colorSpace = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"rgb\";\n  return interpolateColor(value, {\n    inputRange: [0, 1],\n    outputRange: [color1, color2]\n  }, colorSpace);\n};","map":{"version":3,"sources":["Colors.ts"],"names":["cond","add","multiply","lessThan","abs","modulo","round","interpolate","divide","sub","color","Extrapolate","Animated","opacity","c","red","green","blue","offset","condsAndResPairs","match","hh","x","m","colorRGB","rgbToHsv","r","g","b","ma","Math","mi","h","v","d","s","interpolateColorsHSV","colorsAsHSV","colors","inputRange","outputRange","extrapolate","colorHSV","interpolateColorsRGB","a","interpolateColor","colorSpace","config","processColor","bInterpolateColor"],"mappings":"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","sourcesContent":["import Animated from \"react-native-reanimated\";\nimport { processColor } from \"react-native\";\n\nconst {\n  cond,\n  add,\n  multiply,\n  lessThan,\n  abs,\n  modulo,\n  round,\n  interpolate,\n  divide,\n  sub,\n  color,\n  Extrapolate\n} = Animated;\n\ntype Color = string | number;\n\nexport const opacity = (c: number) => ((c >> 24) & 255) / 255;\nexport const red = (c: number) => (c >> 16) & 255;\nexport const green = (c: number) => (c >> 8) & 255;\nexport const blue = (c: number) => c & 255;\n\nfunction match(\n  condsAndResPairs: readonly Animated.Node<number>[],\n  offset = 0\n): undefined | Animated.Node<number> {\n  if (condsAndResPairs.length - offset === 1) {\n    return condsAndResPairs[offset];\n  }\n  if (condsAndResPairs.length - offset === 0) {\n    return undefined;\n  }\n  return cond(\n    condsAndResPairs[offset],\n    condsAndResPairs[offset + 1],\n    match(condsAndResPairs, offset + 2)\n  );\n}\n\nfunction colorHSV(\n  h: Animated.Adaptable<number> /* 0 - 360 */,\n  s: Animated.Adaptable<number> /* 0 - 1 */,\n  v: Animated.Adaptable<number> /* 0 - 1 */\n): Animated.Node<number> {\n  // Converts color from HSV format into RGB\n  // Formula explained here: https://www.rapidtables.com/convert/color/hsv-to-rgb.html\n  const c = multiply(v, s);\n  const hh = divide(h, 60);\n  const x = multiply(c, sub(1, abs(sub(modulo(hh, 2), 1))));\n\n  const m = sub(v, c);\n\n  const colorRGB = (\n    r: Animated.Adaptable<number>,\n    g: Animated.Adaptable<number>,\n    b: Animated.Adaptable<number>\n  ) =>\n    color(\n      round(multiply(255, add(r, m))),\n      round(multiply(255, add(g, m))),\n      round(multiply(255, add(b, m)))\n    );\n\n  return match([\n    lessThan(h, 60),\n    colorRGB(c, x, 0),\n    lessThan(h, 120),\n    colorRGB(x, c, 0),\n    lessThan(h, 180),\n    colorRGB(0, c, x),\n    lessThan(h, 240),\n    colorRGB(0, x, c),\n    lessThan(h, 300),\n    colorRGB(x, 0, c),\n    colorRGB(c, 0, x) /* else */\n  ]) as Animated.Node<number>;\n}\n\nconst rgbToHsv = (c: number) => {\n  const r = red(c) / 255;\n  const g = green(c) / 255;\n  const b = blue(c) / 255;\n\n  const ma = Math.max(r, g, b);\n  const mi = Math.min(r, g, b);\n  let h = 0;\n  const v = ma;\n\n  const d = ma - mi;\n  const s = ma === 0 ? 0 : d / ma;\n  if (ma === mi) {\n    h = 0; // achromatic\n  } else {\n    switch (ma) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n      default: // do nothing\n    }\n    h /= 6;\n  }\n  return { h: h * 360, s, v };\n};\n\nconst interpolateColorsHSV = (\n  animationValue: Animated.Adaptable<number>,\n  inputRange: number[],\n  colors: number[]\n): Animated.Node<number> => {\n  const colorsAsHSV = colors.map(c => rgbToHsv(c));\n  const h = interpolate(animationValue, {\n    inputRange,\n    outputRange: colorsAsHSV.map(c => c.h),\n    extrapolate: Extrapolate.CLAMP\n  });\n  const s = interpolate(animationValue, {\n    inputRange,\n    outputRange: colorsAsHSV.map(c => c.s),\n    extrapolate: Extrapolate.CLAMP\n  });\n  const v = interpolate(animationValue, {\n    inputRange,\n    outputRange: colorsAsHSV.map(c => c.v),\n    extrapolate: Extrapolate.CLAMP\n  });\n  return colorHSV(h, s, v);\n};\n\nconst interpolateColorsRGB = (\n  animationValue: Animated.Adaptable<number>,\n  inputRange: number[],\n  colors: number[]\n) => {\n  const r = round(\n    interpolate(animationValue, {\n      inputRange,\n      outputRange: colors.map(c => red(c)),\n      extrapolate: Extrapolate.CLAMP\n    })\n  );\n  const g = round(\n    interpolate(animationValue, {\n      inputRange,\n      outputRange: colors.map(c => green(c)),\n      extrapolate: Extrapolate.CLAMP\n    })\n  );\n  const b = round(\n    interpolate(animationValue, {\n      inputRange,\n      outputRange: colors.map(c => blue(c)),\n      extrapolate: Extrapolate.CLAMP\n    })\n  );\n  const a = round(\n    interpolate(animationValue, {\n      inputRange,\n      outputRange: colors.map(c => opacity(c)),\n      extrapolate: Extrapolate.CLAMP\n    })\n  );\n  return color(r, g, b, a);\n};\n\ninterface ColorInterpolationConfig {\n  inputRange: number[];\n  outputRange: Color[];\n}\n\nexport const interpolateColor = (\n  value: Animated.Adaptable<number>,\n  config: ColorInterpolationConfig,\n  colorSpace: \"hsv\" | \"rgb\" = \"rgb\"\n): Animated.Node<number> => {\n  const { inputRange } = config;\n  const outputRange = config.outputRange.map(c =>\n    typeof c === \"number\" ? c : processColor(c)\n  );\n  if (colorSpace === \"hsv\") {\n    return interpolateColorsHSV(value, inputRange, outputRange);\n  }\n  return interpolateColorsRGB(value, inputRange, outputRange);\n};\n\nexport const bInterpolateColor = (\n  value: Animated.Adaptable<number>,\n  color1: Color,\n  color2: Color,\n  colorSpace: \"hsv\" | \"rgb\" = \"rgb\"\n) =>\n  interpolateColor(\n    value,\n    {\n      inputRange: [0, 1],\n      outputRange: [color1, color2]\n    },\n    colorSpace\n  );\n"]},"metadata":{},"sourceType":"module"}